console.log("Starting Server...")
require('dotenv').config()

const express = require('express'),
      cookies = require('cookie-session'),
      favicon = require('serve-favicon'),
      timeout = require('connect-timeout'),
      mongodb  = require('mongodb'),
      path = require('path'),
      passport = require('passport'),
      GitHubStrategy = require('passport-github2').Strategy,
      app = express()
const { MongoClient, ServerApiVersion } = require('mongodb');
let collection = null;
const uri = `mongodb+srv://${process.env.USER}:${process.env.PASS}@${process.env.HOST}`

const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true, serverApi: ServerApiVersion.v1 });

const haltOnTimeout =  function(req, res, next) 
{
  if(!req.timedout)
    next();
}

//currently using 2 middle wears
app.use(timeout('5s'))
app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')))
app.use(haltOnTimeout)
app.use(express.static('public'))
app.use(haltOnTimeout)
app.use(express.static('views'))
app.use(haltOnTimeout)
app.use(express.json())
app.use(haltOnTimeout)

client.connect()
  .then(() => {
    return client.db('a3-inventory').collection('inventory')
  })
  .then(__collection => {
    collection = __collection;
})


passport.use(new GitHubStrategy({
  clientID: process.env.GITHUB_CLIENT_ID,
  clientSecret: process.env.GITHUB_CLIENT_SECRET,
  callbackURL: "http://127.0.0.1:3000/auth/github/callback"
},
  function(accessToken, refreshToken, profile, done) {
    User.findOrCreate({ githubId: profile.id }, function (err, user) {
      return done(err, user);
    });
  }
));

//connects to databse and loads data

//github auth

app.get('/auth/github',
  passport.authenticate('github', { scope: [ 'user:email' ] }));

app.get('/auth/github/callback', 
  passport.authenticate('github', { failureRedirect: '/login' }),
  function(req, res) {
    console.log("Logged in")
    // Successful authentication, redirect home.
    res.redirect('/');
  });

  app.get('/account', ensureAuthenticated, function(req, res){
    res.render('account', { user: req.user });
  });

  app.get('/login', function(req, res){
    res.render('login', { user: req.user });
  })

/**
 * When user want's personal data
 */
app.get('/items', (req, res) => {

  collection.find({_id:mongodb.ObjectId(req.query._id)})
  .project({_id:0, items:1}).toArray()
  .then(result => res.json(result));
})

/**
 * When new data is submitted
 */

 app.post( '/add', (req,res) => {
  // assumes only one object to insert
  let body = {_itemID:mongodb.ObjectId(),
              name: req.body.name,
              price:req.body.price,
              quantity:req.body.quantity
            }

  collection.updateOne({_id:mongodb.ObjectId(req.body._id)}, 
                       {$push:{items:body}})
            .then(result => res.json(result))
})

/**
 * Handle Data Modification
 */

 app.post( '/update', (req,res) => {

  let updatedItem = {_itemID:mongodb.ObjectId(req.body._itemID),
    name: req.body.name,
    price:req.body.price,
    quantity:req.body.quantity
  }

  collection
    .updateOne(
      { _id:mongodb.ObjectId( req.body._id ), "items._itemID":mongodb.ObjectId(req.body._itemID)},
      { $set:{ "items.$":updatedItem} }
    )
    .then( result => res.json( result ) )
})

/**
 * Handle Data Deletion
 */

 app.post( '/remove', (req,res) => {
  
  collection
    .updateOne(
      {_id:mongodb.ObjectId(req.body._id)},
      {$pull: {items: {_itemID:mongodb.ObjectId(req.body._itemID)}}}
    ).then(result => res.json(result))
})
/**
 * Get autogenerated field
 */

app.listen(3001)